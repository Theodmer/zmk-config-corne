/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <behaviors/non_overlap.dtsi>

#define DEFAULT 0
#define GRA 1
#define NUM 2
#define SYM 3
#define CONTROL 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        control_layer {
            if-layers = <2 3>;
            then-layer = <4>;
        };
    };
};

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <240>;
};

//=========================//=========================/ Version: 2.0 /=========================//=========================//
/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                         bindings = <
                         
   &kp TAB      &kp Q    &kp W     &kp E         &kp R       &kp T            &kp Y              &kp U    &kp I      &kp O    &kp P     &mt LGUI ESC
   &kp LSHFT    &nkp A   &kp S     &nkp D        &kp F       &kp G            &kp H              &kp J    &kp K      &kp L    &kp SEMI  &kp DQT
   &kp LCTRL    &kp Z    &kp X     &kp C         &kp V       &kp B            &kp N              &kp M    &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                                   &mt LALT DEL  &mo NUM     &kp SPACE        &mt LC(BSPC) BSPC  &mo SYM  &sk RALT
                        >;
                };
                
                qwerty_layer {
                         bindings = <
                         
   &kp TAB      &kp FSLH  &kp L     &kp D         &kp W     &kp COMMA        &kp DOT            &kp F    &kp O     &kp U    &kp SEMI  &mt LGUI ESC
   &kp LSHFT    &nkp N    &kp R     &nkp T        &kp S     &kp G            &kp Y              &kp H    &kp A     &kp E    &kp I     &kp DQT
   &kp LCTRL    &kp Q     &kp X     &kp M         &kp C     &kp V            &kp K              &kp P    &kp B     &kp J    &kp Z     &kp RET
                                    &mt LALT DEL  &mo NUM   &kp SPACE        &mt LC(BSPC) BSPC  &mo SYM  &sk RALT
                        >;
                };

                number_layer {
                        bindings = <

   &kp F1     &kp F2    &kp F3    &kp F4     &kp F5       &kp F6         &none     &kp N7    &kp N8    &kp N9    &none     &none
   &kp F7     &kp F8    &kp F9    &kp F10    &kp F11      &kp F12        &none     &kp N4    &kp N5    &kp N6    &kp N0    &none
   &kp LCTRL  &none     &none     &none      &none        &none          &none     &kp N1    &kp N2    &kp N3    &none     &none
                                  &trans     &none        &trans         &trans    &mo SYM   &none
                        >;
                };

                symbol_layer {
                        bindings = <

   &none    &kp SQT    &kp LT     &kp GT    &kp DQT     &kp GRAVE        &kp AMPS    &kp HASH     &kp LBKT    &kp RBKT    &kp PRCNT  &none
   &none    &kp EXCL   &kp MINUS  &kp PLUS  &kp EQUAL   &kp MINUS        &kp PIPE    &kp COLON    &kp LPAR    &kp RPAR    &kp QMARK  &none
   &none    &kp CARET  &kp FSLH   &kp STAR  &kp BSLH    &kp UNDER        &kp TILDE   &kp DLLR     &kp LBRC    &kp RBRC    &kp AT     &none
                                  &trans    &mo NUM     &trans           &trans      &none        &none
                        >;
                };

                control_layer {
                        bindings = <

   &kp LC(LS(LEFT))  &kp LC(LEFT)  &kp UP    &kp LC(RIGHT) &kp LC(LS(RIGHT))  &bt BT_SEL 0      &none       &none       &kp C_VOL_UP  &none       &none    &tog GRA
   &kp LS(LEFT)      &kp LEFT      &kp DOWN  &kp RIGHT     &kp LS(RIGHT)      &bt BT_SEL 1      &none       &kp C_PREV  &kp C_PP      &kp C_NEXT  &none    &none
   &none             &none         &none     &none         &none              &none             &bt BT_CLR  &none       &kp C_VOL_DN  &none       &none    &none
                                             &trans        &none              &trans            &trans      &none       &trans
                        >;
                };

        };
};
